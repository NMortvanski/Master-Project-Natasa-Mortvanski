for (i in loop_vector) { # Loop over loop.vector
densityPlot(all_healthy, i)
}
for (i in seq_along(loop_vector)) { # Loop over loop.vector
densityPlot(all_healthy, i)
}
for (i in seq_along(loop_vector)) { # Loop over loop.vector
densityPlot(all_healthy, loop_vector[i])
}
View(plot)
View(plot)
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
densityPlot <- function (df, metric){
ggplot(data = df, , aes(x=metric) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
densityPlot <- function (df, metric){
ggplot(data = df, , aes(x = .data[[x_var_label]]) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
grid.arrange(plot[[1:7]], ncol=3, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Fisher's index \n4) Margalef's index and 5) Inverse Simpson's index \nand 6) Menhinick's index in healthy dataset", gp=gpar(fontsize=10,font=2)))
plot[[1:7]]
plot[[1]]
densityPlot <- function (df, metric){
ggplot(data = df, , aes(x = .data[[metric]]) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = .data[[metric]]) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = metric) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
sh_healthy_dist
loop_vector
all_healthy[[shannon_entropy]]
.all_healthy[[shannon_entropy]]
all_healthy[shannon_entropy]
all_healthy[,shannon_entropy]
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = .data[[metric]]) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
install.packages("shiny")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
View(ui)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp("App-Hello_Shiny")
runApp("App-Hello_Shiny")
runApp("App-Hello_Shiny")
runApp("App-Hello_Shiny")
runExample ("01_hello")
runApp("App-Hello_Shiny")
runApp("App-Hello_Shiny")
setwd("~/Desktop/master_project/project_analysis/AGP_all_samples")
runApp("App-Hello_Shiny")
runApp("App_Hello_Shiny")
runApp("App_Hello_Shiny")
runApp("newdir")
runApp("~/Desktop/master_project/project_analysis/AGP_all_samples/App_Hello_Shiny")
runApp("~/Desktop/master_project/project_analysis/AGP_all_samples/App_Hello_Shiny")
runApp('App_Hello_Shiny')
runApp('App_Hello_Shiny')
runExample("02_text")
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
runExample("08_html")       # Shiny app built from HTML
runExample("09_upload")     # file upload wizard
runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer
runExample("02_text")       # ***CHOOSING COLUMNS
runApp("~/Desktop/master_project/project_analysis/AGP_all_samples/App_Hello_Shiny")
runExample("06_tabsets")    # ***MULTIPLE VIEW PANELS
runApp("~/Desktop/master_project/project_analysis/AGP_all_samples/App_Hello_Shiny")
runExample("06_tabsets")    # ***MULTIPLE VIEW PANELS
runApp("~/Desktop/master_project/project_analysis/AGP_all_samples/App_Shiny")
runExample("02_text")       # ***CHOOSING COLUMNS
View(plot)
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = "metric") +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = select(metric)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
}
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
for (i in seq_along(loop_vector)) { # Loop over loop.vector
plot[[i]] = densityPlot(all_healthy, loop_vector[i])
print(plot[[i]])
}
### Distributions of diversity metrics (histograms)
PlotXTabs
library(PlotXTabs)
install.packages("PlotXTabs")
install.packages("CGPfunctions")
library(CGPfunctions)
View(all_healthy)
PlotXTabs(all_healthy, acid_reflux, simpson_density)
PlotXTabs(all_healthy, acid_reflux, sex)
PlotXTabs(all_healthy, acid_reflux, age_cat)
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = df$metric)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
loop_vector <- names(all_healthy[2:8])
plot <- vector('list', length(loop_vector))
loop_vector
loop_vector[1]
densityPlot(all_healthy, loop_vector[1])
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = metric)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density") )
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = metric)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
}
loop_vector <- names(all_healthy[2:8])
densityPlot(all_healthy, loop_vector[1])
.data[[ loop_vector[1]]]
ggplot(data = df, aes(x = data(metric))) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = data(metric))) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
}
densityPlot(all_healthy, loop_vector[1])
data (loop_vector[1])
loop_vector[1]
data ("shannon_entropy")
data (shannon_entropy)
densityPlot(all_healthy, shannon_density)
ggplot(data = df, aes(x = metric)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = metric)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
}
densityPlot(all_healthy, shannon_density)
# Histogram with density plot
sh_healthy_dist <- ggplot(all_healthy, aes(x=shannon_entropy)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
labs(x ="Shannon's index")
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = df[metric])) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
}
densityPlot(all_healthy, 2)
densityPlot <- function (df, metric){
ggplot(data = df, aes(x = names(df[metric]))) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
xlab(label = metric) +
ylab(label = "density")
}
densityPlot(all_healthy, 2)
gini_AGP <- read.delim("~/Desktop/master_project/project_analysis/AGP_all_samples/gini_AGP_all.tsv")
strong_AGP <- read.delim("~/Desktop/master_project/project_analysis/AGP_all_samples/strong_AGP_all.tsv")
# Merge all alpha diversity tables
all_alpha <- list(shannon_AGP, chao1_AGP, menhinick_AGP, margalef_AGP, simpson_AGP, fisher_AGP, gini_AGP, strong_AGP)
menhinick_AGP <- read.delim("~/Desktop/master_project/project_analysis/AGP_all_samples/menhinick_AGP_all.tsv")
# Merge all alpha diversity tables
all_alpha <- list(shannon_AGP, chao1_AGP, menhinick_AGP, margalef_AGP, simpson_AGP, fisher_AGP, gini_AGP, strong_AGP)
all_alpha <- all_alpha %>% reduce(inner_join, by="X")
names(all_alpha)[names(all_alpha) == 'X'] <- 'sample_id'
nrow(all_alpha)
View(all_alpha)
# Merge all_alpha and AGP_metadata
AGP <- all_alpha %>% left_join(AGP_metadata, by=c('sample_id' = 'sample_name'))
# Replace NA with empty string
AGP <- replace(AGP, is.na(AGP), "")
nrow(AGP)
# Filter samples by age (only adult samples)
AGP_healthy_subset <- AGP %>%
filter(age_cat== "20s" |
age_cat== "30s" |
age_cat== "40s" |
age_cat== "50s" |
age_cat== "60s")
# Filter out stool and feces samples
AGP_healthy_subset <- AGP_healthy_subset %>%
filter(sample_type=="feces" |
sample_type=="Stool")
# Include only samples that have reported not having any of the following diseases
AGP_healthy_subset_1 <- AGP_healthy_subset %>%
filter(host_body_mass_index > 18.5 &
host_body_mass_index < 30 &
antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition" &
cancer=="I do not have this condition" &
mental_illness=="No" &
mental_illness_type_substance_abuse=="false" &
mental_illness_type_depression=="false" &
asd=="I do not have this condition" &
alzheimers=="I do not have this condition" &
add_adhd=="I do not have this condition" &
epilepsy_or_seizure_disorder=="I do not have this condition" &
sibo=="I do not have this condition" &   # small intestinal bacterial overgrowth
pku =="I do not have this condition" &   # phenylketonuria
thyroid=="I do not have this condition" &
kidney_disease=="I do not have this condition" &
clinical_condition=="I do not have this condition" &
acid_reflux=="I do not have this condition" &
autoimmune=="I do not have this condition" &
cardiovascular_disease=="I do not have this condition" &
lung_disease =="I do not have this condition" &
liver_disease =="I do not have this condition")
# Other solution is to aplly only filters used in original AGP study:
AGP_healthy_subset_2 <- AGP_healthy_subset %>%
filter(host_body_mass_index > 18.5 &
host_body_mass_index < 30 &
antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition")
# AGP filters + IBS and Cdiff
AGP_healthy_subset_3 <- AGP_healthy_subset %>%
filter(host_body_mass_index > 18.5 &
host_body_mass_index < 30 &
antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition")
# Number of samples without any reported clinical condition
nrow(AGP_healthy_subset_1)  #861
# Number of samples after filtering only by criteria reported by AGP paper
nrow(AGP_healthy_subset_2)  #2145
# Number of samples after filtering only by criteria reported by AGP paper + without IBS and Cdiff
nrow(AGP_healthy_subset_3)  #3275
AGP_healthy_subset <- AGP_healthy_subset %>%
filter(host_body_mass_index > 18.5 &
host_body_mass_index < 30 &
antibiotic_history=="I have not taken antibiotics in the past year." &
diabetes=="I do not have this condition" &
ibd=="I do not have this condition" &
ibs=="I do not have this condition" &
cdiff=="I do not have this condition")
nrow(AGP_healthy_subset)
# Examine Vioscreen data columns
cols <- grep("^vioscreen.?", names(AGP_healthy_subset), value=T)
# Show unique values in each of the vioscreen columns
lapply(AGP_healthy_subset[,cols], unique)
# Delete vioscreen columns
AGP_healthy_subset <- AGP_healthy_subset[, !names(AGP_healthy_subset) %in% cols]
# Delete almost empty columns (missing more than 90% of the samples)
empty_columns <- colSums(is.na(AGP_healthy_subset) | AGP_healthy_subset == "") > nrow(AGP_healthy_subset)*0.9
# see names of the empty columns
#names(empty_columns)[empty_columns == "TRUE"]
AGP_healthy_subset <- AGP_healthy_subset[, !names(AGP_healthy_subset) %in% empty_columns]
# Delete columns that have more than 80% Uncpecified answers
unspec_columns <- colSums(AGP_healthy_subset == "Unspecified" | AGP_healthy_subset == "") > nrow(AGP_healthy_subset)*0.8
# see names of the unspecified columns
#names(unspec_columns)[unspec_columns == "TRUE"]
AGP_healthy_subset <- AGP_healthy_subset[, !unspec_columns]
#Delete columns with uniform values (all values are the same)
uniform_columns <- vapply(AGP_healthy_subset, function(x) length(unique(x)) == 1, logical(1L))
# see names of the uniform columns
#names(uniform_columns)[uniform_columns == "TRUE"]
AGP_healthy_subset <- AGP_healthy_subset[, !uniform_columns]
# Delete covid related columns
cols <- grep("^covid?", names(AGP_healthy_subset), value=T)
AGP_healthy_subset <- AGP_healthy_subset[, !names(AGP_healthy_subset) %in% cols]
# Delete columns related to surfing data
cols <- grep("^surf_.?", names(AGP_healthy_subset), value=T)
AGP_healthy_subset <- AGP_healthy_subset[, !names(AGP_healthy_subset) %in% cols]
table(AGP_healthy_subset$host_age_units) ### all are in years or not applicable
### host_age_normalized_years is the same as host_age,
### host_subject_id and anonymized_name - we already have sample identifiers
# (sample_name), we don't need subject ID since we don't need to identify subjects
### roommates_in_study - irrelevant since we can't identify them,
### toilet_water_access - irrelevant
### collection_timestamp - irrelevant
# Delete columns
cols <- c('host_age_units', 'host_age_normalized_years', 'host_subject_id', 'roommates_in_study', 'toilet_water_access', 'anonymized_name', 'collection_timestamp')
AGP_healthy_subset <- AGP_healthy_subset[, !names(AGP_healthy_subset) %in% cols]
ncol(AGP_healthy_subset)  #187
colnames(AGP_healthy_subset)
write.table(AGP, file = "~/Desktop/master_project/project_analysis/AGP_all_samples/AGP_all.tsv", append = FALSE, sep = "\t", dec = ".", row.names = FALSE, col.names = TRUE)
write.table(AGP_healthy_subset, file = "~/Desktop/master_project/project_analysis/AGP_all_samples/AGP_healthy.tsv", append = FALSE, sep = "\t", dec = ".", row.names = FALSE, col.names = TRUE)
# Load all AGP data
AGP <- read.delim("~/Desktop/master_project/project_analysis/AGP_all_samples/AGP_all.tsv")
# Load healthy samples' table
all_healthy <- read.delim("~/Desktop/master_project/project_analysis/AGP_all_samples/AGP_healthy.tsv")
View(all_healthy)
ks.test(all_healthy$shannon_entropy, 'pnorm')
ks.test(all_healthy$chao1, 'pnorm')
ks.test(all_healthy$fisher_alpha, 'pnorm')
ks.test(all_healthy$margalef, 'pnorm')
ks.test(all_healthy$inverse_simpson, 'pnorm')
ks.test(all_healthy$menhinick, 'pnorm')
ks.test(all_healthy$gini_index, 'pnorm')
ks.test(all_healthy$strong, 'pnorm')
library(nortest)
ad.test(all_healthy$shannon_entropy, 'pnorm')
#install.packages('nortest')
library(nortest)
ad.test(all_healthy$shannon_entropy, 'pnorm')
ad.test(all_healthy$shannon_entropy)
ad.test(all_healthy$chao1)
ad.test(all_healthy$fisher_alpha)
ad.test(all_healthy$margalef)
ad.test(all_healthy$inverse_simpson)
ad.test(all_healthy$menhinick)
ad.test(all_healthy$gini_index)
ad.test(all_healthy$strong)
# Histogram with density plot
sh_healthy_dist <- ggplot(all_healthy, aes(x=shannon_entropy)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666") +
labs(x ="Shannon's index")
# Histogram with density plot
ch_healthy_dist <- ggplot(all_healthy, aes(x=chao1)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="lightblue")  +
labs(x ="Chao1")
# Fisher's index histogram with density plot
fh_healthy_dist <- ggplot(all_healthy, aes(x=fisher_alpha)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#E69F00") +
labs(x ="Fisher's index")
# Margalef's index histogram with density plot
mg_healthy_dist <- ggplot(all_healthy, aes(x=margalef)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#009E73") +
labs(x ="Margalef's index")
# Inverse Simpson's index histogram with density plot
insm_healthy_dist <- ggplot(all_healthy, aes(x=inverse_simpson)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#56B4E9") +
labs(x ="Inverse Simpsons's index")
# Menhinick's index histogram with density plot
mc_healthy_dist <- ggplot(all_healthy, aes(x=menhinick)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#D55E00") +
labs(x ="Menhinick's index")
# Inverse Simpson's index histogram with density plot
gi_healthy_dist <- ggplot(all_healthy, aes(x=gini_index)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#56B4E9") +
labs(x ="Gini index")
# Menhinick's index histogram with density plot
st_healthy_dist <- ggplot(all_healthy, aes(x=strong)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#D55E00") +
labs(x ="Strong's index")
grid.arrange(sh_healthy_dist, ch_healthy_dist, fh_healthy_dist, mg_healthy_dist, insm_healthy_dist, mc_healthy_dist, gi_healthy_dist, st_healthy_dist, ncol=3, top = textGrob("Distributions of 1) Shannon's index  2) Chao1 3) Fisher's index \n4) Margalef's index 5) Inverse Simpson's index \n6) Menhinick's index 7) Gini's index and 8) Strong's index in healthy dataset", gp=gpar(fontsize=10,font=2)))
ks.test(all_healthy$shannon_entropy, 'pnorm')
ks.test(all_healthy$chao1, 'pnorm')
ks.test(all_healthy$fisher_alpha, 'pnorm')
ks.test(all_healthy$margalef, 'pnorm')
ks.test(all_healthy$inverse_simpson, 'pnorm')
ks.test(all_healthy$menhinick, 'pnorm')
ks.test(all_healthy$gini_index, 'pnorm')
ks.test(all_healthy$strong, 'pnorm')
### Anderson-Darling Test in R (Quick Normality Check)
#install.packages('nortest')
library(nortest)
ad.test(all_healthy$shannon_entropy)
ad.test(all_healthy$chao1)
ad.test(all_healthy$fisher_alpha)
ad.test(all_healthy$margalef)
ad.test(all_healthy$inverse_simpson)
ad.test(all_healthy$menhinick)
ad.test(all_healthy$gini_index)
ad.test(all_healthy$strong)
ad.test(all_healthy$shannon_entropy, "pnorm", mean=mean(all_healthy$shannon_entropy), sd=sd(all_healthy$shannon_entropy))
ad.test(all_healthy$shannon_entropy, "pnorm")
ad.test
